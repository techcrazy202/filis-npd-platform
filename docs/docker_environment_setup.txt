# docker-compose.yml - Fi-Lis NPD Platform Production Setup

version: '3.8'

services:
  # ============================================================================
  # DATABASE SERVICES
  # ============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: filis-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-filis_npd}
      POSTGRES_USER: ${DB_USER:-filis_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
      - ./docker/postgres.conf:/etc/postgresql/postgresql.conf
    ports:
      - "${DB_PORT:-5432}:5432"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-filis_user} -d ${DB_NAME:-filis_npd}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - filis-network

  redis:
    image: redis:7-alpine
    container_name: filis-redis
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - filis-network

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: filis-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-filis_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-filis_npd}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      
      # AI Configuration
      - AZURE_AI_ENDPOINT=${AZURE_AI_ENDPOINT}
      - AZURE_AI_KEY=${AZURE_AI_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      
      # Storage Configuration
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT:-sgp1.digitaloceanspaces.com}
      - DO_SPACES_KEY=${DO_SPACES_KEY}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET:-filis-assets}
      - DO_SPACES_REGION=${DO_SPACES_REGION:-sgp1}
      
      # Payment Configuration
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET}
      - RAZORPAY_WEBHOOK_SECRET=${RAZORPAY_WEBHOOK_SECRET}
      
      # Email Configuration
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      
      # SMS Configuration (for OTP)
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      
      # Security
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://app.fi-lis.com}
      
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "${BACKEND_PORT:-3001}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - filis-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: filis-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://app.fi-lis.com/api}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://app.fi-lis.com}
      - NEXT_PUBLIC_DO_SPACES_URL=${NEXT_PUBLIC_DO_SPACES_URL}
      - NEXT_PUBLIC_RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID}
    volumes:
      - ./frontend/.next:/app/.next
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - filis-network

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      target: production
    container_name: filis-admin
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://app.fi-lis.com/api}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://app.fi-lis.com}
    ports:
      - "${ADMIN_PORT:-3002}:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - filis-network

  # ============================================================================
  # REVERSE PROXY & SSL
  # ============================================================================

  nginx:
    image: nginx:alpine
    container_name: filis-nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx-templates:/etc/nginx/templates:ro
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_DOMAIN=${DOMAIN:-app.fi-lis.com}
      - NGINX_FRONTEND_HOST=frontend:3000
      - NGINX_BACKEND_HOST=backend:3000
      - NGINX_ADMIN_HOST=admin:3000
    depends_on:
      - frontend
      - backend
      - admin
    restart: unless-stopped
    networks:
      - filis-network

  # ============================================================================
  # MONITORING & UTILITIES
  # ============================================================================

  queue-dashboard:
    build:
      context: ./backend
      dockerfile: Dockerfile.queue-dashboard
    container_name: filis-queue-dashboard
    environment:
      - REDIS_URL=redis://redis:6379
      - NODE_ENV=production
    ports:
      - "${QUEUE_DASHBOARD_PORT:-3003}:3000"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - filis-network

  # Background job processor
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: worker
    container_name: filis-worker
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-filis_user}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-filis_npd}
      - REDIS_URL=redis://redis:6379
      - AZURE_AI_ENDPOINT=${AZURE_AI_ENDPOINT}
      - AZURE_AI_KEY=${AZURE_AI_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DO_SPACES_ENDPOINT=${DO_SPACES_ENDPOINT}
      - DO_SPACES_KEY=${DO_SPACES_KEY}
      - DO_SPACES_SECRET=${DO_SPACES_SECRET}
      - DO_SPACES_BUCKET=${DO_SPACES_BUCKET}
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - filis-network

  # Database backup service
  backup:
    image: postgres:15-alpine
    container_name: filis-backup
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./docker/backup-scripts:/scripts
    command: >
      sh -c "
        echo '0 2 * * * /scripts/backup.sh' | crontab - &&
        crond -f
      "
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - filis-network

# ============================================================================
# NETWORKS & VOLUMES
# ============================================================================

networks:
  filis-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local